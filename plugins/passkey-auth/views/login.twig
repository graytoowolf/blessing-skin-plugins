{% extends 'auth.base' %}

{% block title %}{{ trans('auth.login.title') }}{% endblock %}

{% block content %}
<div class="login-box">
    <div class="card">
        <div class="card-body login-card-body">
            <form id="login-form" method="post">
                <div class="input-group mb-3">
                    <input type="email" class="form-control" name="identification" placeholder="{{ trans('auth.email') }}" required>
                    <div class="input-group-append">
                        <div class="input-group-text">
                            <i class="fas fa-envelope"></i>
                        </div>
                    </div>
                </div>
                <div class="input-group mb-3">
                    <input type="password" class="form-control" name="password" placeholder="{{ trans('auth.password') }}" required>
                    <div class="input-group-append">
                        <div class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="checkbox icheck">
                            <label>
                                <input type="checkbox" name="keep" checked> {{ trans('auth.keep') }}
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col">
                        <button type="submit" class="btn btn-primary btn-block">{{ trans('auth.login.button') }}</button>
                    </div>
                </div>
            </form>

            <div class="social-auth-links text-center mb-3">
                <p>{{ trans('auth.login.other') }}</p>
                <button class="btn btn-block btn-default" onclick="window.location.href='{{ url('auth/login/microsoft') }}'">
                    <i class="fab fa-microsoft mr-2"></i> Microsoft
                </button>
                <button class="btn btn-block btn-default" id="passkey-login">
                    <i class="fas fa-key mr-2"></i> Passkey
                </button>
            </div>

            <p class="mb-1">
                <a href="{{ url('auth/forgot') }}">{{ trans('auth.forgot-link') }}</a>
            </p>
            <p class="mb-0">
                <a href="{{ url('auth/register') }}" class="text-center">{{ trans('auth.register-link') }}</a>
            </p>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ parent() }}
<script>
    blessing.event.on('mounted', () => {
        const passkeyLoginButton = document.getElementById('passkey-login');
        if (passkeyLoginButton) {
            passkeyLoginButton.addEventListener('click', async () => {
                try {
                    const credential = await navigator.credentials.get({
                        publicKey: {
                            challenge: new Uint8Array(32),
                            rpId: window.location.hostname,
                            userVerification: 'preferred',
                            timeout: 60000
                        }
                    });

                    const response = {
                        id: credential.id,
                        type: credential.type,
                        rawId: Array.from(new Uint8Array(credential.rawId)),
                        response: {
                            authenticatorData: Array.from(new Uint8Array(credential.response.authenticatorData)),
                            clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON)),
                            signature: Array.from(new Uint8Array(credential.response.signature))
                        }
                    };

                    const result = await blessing.fetch.post('/auth/login', {
                        type: 'passkey',
                        credentials: response
                    });

                    if (result.code === 0) {
                        window.location.href = result.redirect;
                    } else {
                        blessing.notify.toast.error(result.message);
                    }
                } catch (error) {
                    if (error instanceof DOMException && error.name === "NotAllowedError") {
                        blessing.notify.toast.warning(trans('passkey-auth.verify_rejected'));
                    } else {
                        blessing.notify.toast.error(trans('passkey-auth.operation_failed', { msg: error.message }));
                    }
                }
            });
        }
    });
</script>
{% endblock %}